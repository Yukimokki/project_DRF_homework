name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: flake8 .


  test:
    needs: lint
    runs-on: ubuntu-latest


    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

#    - name: Cashe pip
#      uses: actions/cache@v3
#      with:
#        path: ~/.cache/pip
#        key: ${{ postgres.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#        restore-keys: ${{ postgres.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        

    - name: Configure environment
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DEBUG: ${{ secrets.DEBUG }}
        NAME: ${{ secrets.NAME }}
        USER: ${{ secrets.USER }}
        PASSWORD: ${{ secrets.PASSWORD }}
        HOST: ${{ secrets.HOST }}
        PORT: ${{ secrets.PORT }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
        EMAIL_USE_SSL: ${{ secrets.EMAIL_USE_SSL }}
        STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
        LOCATION: ${{ secrets.LOCATION }}
        CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
        CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      run: |
        echo "SECRET_KEY=$SECRET_KEY" >> .env
        echo "DEBUG=$DEBUG" >> .env
        echo "NAME=$NAME" >> .env
        echo "USER=$USER" >> .env
        echo "PASSWORD=$PASSWORD" >> .env
        echo "HOST=$HOST" >> .env
        echo "PORT=$PORT" >> .env
        echo "EMAIL_HOST=$EMAIL_HOST" >> .env
        echo "EMAIL_PORT=$EMAIL_PORT" >> .env
        echo "EMAIL_HOST_USER=$EMAIL_HOST_USER" >> .env
        echo "EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD" >> .env
        echo "EMAIL_USE_TLS=$EMAIL_USE_TLS" >> .env
        echo "EMAIL_USE_SSL=$EMAIL_USE_SSL" >> .env
        echo "STRIPE_API_KEY=$STRIPE_API_KEY" >> .env
        echo "LOCATION=$LOCATION" >> .env
        echo "CELERY_BROKER_URL=$CELERY_BROKER_URL" >> .env
        echo "CELERY_RESULT_BACKEND=$CELERY_RESULT_BACKEND" >> .env
        echo "POSTGRES_DB=$POSTGRES_DB" >> .env
        echo "POSTGRES_USER=$POSTGRES_USER" >> .env
        echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
        echo "POSTGRES_HOST=$POSTGRES_HOST" >> .env
        echo "POSTGRES_PORT=$POSTGRES_PORT" >> .env

#    - name: Run migrations
#      run: python manage.py migrate

    - name: Run tests
      run: python manage.py test


#build:
#  needs: test
#  runs-on: ubuntu-latest
#
#  steps:
#    - name: Check out code
#      uses: actions/checkout@v3
#
#    - name: Log in in Doocker hub
#      run: echo ${{ secrest.DOCKER_HUB_ACCESS_TOCKEN }} | docker login -u ${{secrets.DOCKER_HUB_USERNAME}} --password-stdin
#
#    - name: Build Docker image
#      run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .
#
#
#    - name: Push Docker image in Docker hub
#      run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
#
#
#deploy:
#  needs: build
#  runs-on: ubuntu-latest
#
#  steps:
#    - name: Set up SSH
#      uses: webfactory/ssh-agent@v0.9.0
#      with:
#        ssh-private-key: ${{ secrets.SSH_KEY }}
#
#    - name: Deploy to server
#      run: |
#        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#        docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.ha }}
#        docker stop myapp || true
#        docker rm myapp || true
#        docker run -d --name myapp -p 80:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
#        EOF
